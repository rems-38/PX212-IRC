-- Test des fonctions xor
putStrLn "=== Test xor ==="
xor (Z2Z 1) (Z2Z 1) -- Z2Z 0
xor (Z2Z 1) (Z2Z 0) -- Z2Z 1
xor (Z2Z 0) (Z2Z 0) -- Z2Z 0
  
-- Test de la fonction oppose2
putStrLn "=== Test oppose2 ==="
oppose2 (Z2Z 1) -- Z2Z 1
oppose2 (Z2Z 0) -- Z2Z 0

-- Test de la fonction toZ2Z
putStrLn "=== Test toZ2Z ==="
toZ2Z (Z2Z 1) -- Z2Z 1
toZ2Z (Z2Z 0) -- Z2Z 0

-- Test de la fonction toPoly_Z2Z
putStrLn "=== Test toPoly_Z2Z ==="
toPoly_Z2Z [1, 0, 1, 1] -- Pol [Z2Z 1, Z2Z 0, Z2Z 1, Z2Z 1], 1 + x² + x³
toPoly_Z2Z [0, 1, 0] -- Pol [Z2Z 0, Z2Z 1, Z2Z 0], x
toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1] -- Pol [Z2Z 1, Z2Z 1, Z2Z 1, Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 1], 1 + x + x² + x⁴ + x⁶
toPoly_Z2Z [1, 1, 0, 0, 0, 0, 0, 1] -- Pol [Z2Z 1, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 1], 1 + x + x⁷

-- Test de l'instance Group de Z_sur_2Z
a = Z2Z 1
b = Z2Z 0
c = Z2Z 1
putStrLn "=== Test Group instance for Z_sur_2Z ==="
putStrLn "Associativité : "
(a `operation` b) `operation` c == a `operation` (b `operation` c) -- True
putStrLn "Element neutre : "
a `operation` neutre == a && neutre `operation` a == a -- True
putStrLn "Symétrique : "
a `operation` inverse a == neutre && inverse a `operation` a == neutre -- True

-- Test de la fonction addition_poly (via instanciation donc operation)
putStrLn "=== Test addition_poly (via instanciation donc operation) ==="
operation (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [1, 1, 0, 0, 0, 0, 0, 1]) -- 
operation (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [0, 1, 0]) -- 
operation (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) -- 

-- Test de la fonction multiplication_poly (via nstanciation donc multiplication)
putStrLn "=== Test multiplication_poly (via nstanciation donc multiplication) ==="
multiplication (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [1, 1, 0, 0, 0, 0, 0, 1]) -- 
multiplication (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [0, 1, 0]) -- 
multiplication (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) (toPoly_Z2Z [1, 1, 1, 0, 1, 0, 1]) -- 

