-- Test de toBlock
putStrLn "=== Test toBlock ==="
toBlock "32 ae f4" == [Pol [Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 1],Pol [Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1],Pol [Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 1]]

-- Test de addRoundKey
-- Les tests suivants sont basés sur l'annexe B du document FIPS-197 (p37)
-- à partir de l'input jusqu'à la 1ère ligne (avant le 2ème addRoundKey donc)
input_appendixB = toBlock "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34"
cipher_key = toBlock "2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c"
res_aRK = toBlock "19 3d e3 be a0 f4 e2 2b 9a c6 8d 2a e9 f8 48 08"
putStrLn "=== Test addRoundKey ==="
addRoundKey input_appendixB cipher_key == res_aRK

-- Test de subBytes
res_sB = toBlock "d4 27 11 ae e0 bf 98 f1 b8 b4 5d e5 1e 41 52 30"
putStrLn "=== Test subBytes ==="
subBytes res_aRK == res_sB

-- Test de shiftRows
res_sR = toBlock "d4 bf 5d 30 e0 b4 52 ae b8 41 11 f1 1e 27 98 e5"
putStrLn "=== Test shiftRows ==="
shiftRows res_sB == res_sR

-- Test de mixColumns
res_mC = toBlock "04 66 81 e5 e0 cb 19 9a 48 f8 d3 7a 28 06 26 4c"
putStrLn "=== Test mixColumns ==="
mixColumns res_sR == res_mC 



-- Test Cipher 1
output_cipher = toBlock "39 25 84 1d 02 dc 09 fb dc 11 85 97 19 6a 0b 32"
putStrLn "=== Test Cipher ==="
cipher 128 input_appendixB cipher_key == output_cipher

-- Test Cipher 128
plaintext = toBlock "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff"
key = toBlock "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f"
output = toBlock "69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a"
putStrLn "=== Test Cipher 128 ==="
cipher 128 plaintext key == output

-- Test Cipher 192
plaintext = toBlock "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff"
key = toBlock "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17"
output = toBlock "dd a9 7c a4 86 4c df e0 6e af 70 a0 ec 0d 71 91"
putStrLn "=== Test Cipher 192 ==="
cipher 192 plaintext key == output

-- Test Cipher 256
plaintext = toBlock "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff"
key = toBlock "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f"
output = toBlock "8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89"
putStrLn "=== Test Cipher 256 ==="
cipher 256 plaintext key == output

-- Test InvCipher
putStrLn "=== Test InvCipher ==="
invCipher 128 output_cipher cipher_key == input_appendixB